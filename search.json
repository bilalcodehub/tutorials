[
  {
    "objectID": "monailabel_cvat_customization_deployment.html",
    "href": "monailabel_cvat_customization_deployment.html",
    "title": "Customizing and Deploying MONAILabel Models with Nuclio and CVAT for AI-Assisted Tool Tracking",
    "section": "",
    "text": "Step 1: Accessing the MONAILabel Docker Container\nWe need to modify the tooltracking.yaml file inside the MONAILabel Docker container to customize the labels for the AI tool tracking model.\n\nRun MONAILabel Docker Container: Open a terminal and run the following command to access the MONAILabel container:\ndocker run -it --rm --gpus all --ipc=host --net=host \\\n    -p 8080:8080 \\\n    -v /home/exsdatalab/data/endo:/opt/monai/datasets \\\n    -v /home/exsdatalab/data/apps:/opt/monai/apps \\\n    projectmonai/monailabel:latest bash\nThis command will launch the MONAILabel container and provide you with an interactive terminal.\n\n\n\nStep 2: Editing the tooltracking.yaml File\nThe tooltracking.yaml file defines the labels used by MONAILabel’s AI tool tracking model. If the default model is not sufficient (for example, if you want to track custom labels rather than the default “Tool” label), you can customize it to suit your needs.\n\nOpen the YAML file for Editing: Inside the Docker container, use nano or vi to open the tooltracking.yaml file:\nnano /usr/local/monailabel/plugins/cvat/endocopy/tooltracking.yaml\nModify the Labels: Replace the default labels:\nspec: |\n      [\n        { \"id\": 1, \"name\": \"Tool\" }\n      ]\nWith your custom labels, for example:\nspec: |\n      [\n        { \"id\": 1, \"name\": \"Tumor_Cancer\" },\n        { \"id\": 2, \"name\": \"Tumor_Sessile_Adenoma\" },\n        { \"id\": 3, \"name\": \"Tumor_Polypoidal_Adenoma\" },\n        { \"id\": 4, \"name\": \"Tumor_Pedunculated_Adenoma\" },\n        ...\n        { \"id\": 29, \"name\": \"Reflection\" }\n      ]\nSave the File: After modifying the file, save it and exit the editor.\n\n\n\nStep 3: Copying the Customized File for Persistence\nTo ensure the changes are persistent, we will copy the customized tooltracking.yaml file out of the Docker container.\n\nCopy the File for Persistence: Run the following command to copy the updated tooltracking.yaml file to your local system:\ndocker cp $(docker container ls | grep 'sweet_agnesi' | awk '{print $1}'):/usr/local/monailabel/plugins/cvat apps/endocopy/cvat_plugins\n\n\n\nStep 4: Deploying the Models with Nuclio\nNow that the labels have been customized, we will deploy the updated models using Nuclio.\n\nCreate a Workspace Folder: Inside the cvat folder, create a workspace folder:\nmkdir workspace\nCopy the CVAT Plugin from MONAILabel: Use the following command to copy the CVAT plugin folder from the MONAILabel container into the workspace folder:\ndocker cp $(docker container ls | grep 'sweet_agnesi' | awk '{print $1}'):/usr/local/monailabel/plugins/cvat workspace\nDeploy the Models with Nuclio: Deploy the updated models by running the following command:\n./workspace/cvat/deploy.sh endoscopy\nIf you only want to deploy a specific function (such as tooltracking), run:\n./workspace/cvat/deploy.sh endoscopy tooltracking\n\n\n\nStep 5: Verifying the Deployment\n\nOpen Nuclio Dashboard: After deploying the models, open the Nuclio dashboard in your browser to verify that the models have been deployed successfully:\nhttp://localhost:8070\nVerify CVAT Integration: Open CVAT by navigating to:\nhttp://localhost:8080\nLog in with your credentials, and you should now see a Models tab. Click on it to view the deployed models and verify that they are available for use.\n\n\n\nNext Steps\nYou have successfully customized MONAILabel’s AI tool tracking model and deployed it using Nuclio. You can now use CVAT to perform automated annotations based on your custom labels.",
    "crumbs": [
      "Customizing and Deploying MONAILabel Models with Nuclio and CVAT for AI-Assisted Tool Tracking"
    ]
  },
  {
    "objectID": "final_configuration_steps_for_monailabel_and_cvat.html",
    "href": "final_configuration_steps_for_monailabel_and_cvat.html",
    "title": "Copying Datasets, Adding Labels, and Configuring MONAILabel with CVAT",
    "section": "",
    "text": "Step 1: Copying the Dataset\nWe assume that your dataset is organized into a main folder, with images stored in the images/ subfolder. In this step, you will copy your dataset into the datasets/ folder. For example, if your dataset is called SurgVU, you should copy it like this:\n\nCopy your dataset to the datasets folder:\ncp -r /path/to/SurgVU datasets/images/\n\nMake sure the datasets/images/ folder contains all your dataset images.\n\n\nStep 2: Adding the labels.csv File\nYou need to create a labels.csv file that MONAILabel can read when creating a CVAT datasource. This file should contain columns for the label name, id, and color.\n\nCreate the labels.csv file in the apps/endoscopy/ folder, and fill it with the following content:\n\nname,id,color\nTumor_Cancer,1,#FF0000\nTumor_Sessile_Adenoma,2,#00FF00\nTumor_Polypoidal_Adenoma,3,#0000FF\nTumor_Pedunculated_Adenoma,4,#FFFF00\nSucker,5,#FF00FF\nDiathermy,6,#00FFFF\nRetractor,7,#800000\nNeedle_Holder,8,#008000\nNeedle,9,#000080\nSuture,10,#808000\nClip,11,#800080\nScissors,12,#008080\nRectoscope,13,#FFA500\nRectal_Wall,14,#A52A2A\nRectal_Wall_Defect,15,#5F9EA0\nRectal_Fold,16,#D2691E\nRectal_Lumen,17,#FF7F50\nMucosa,18,#6495ED\nSubmucosa,19,#DC143C\nCircular_Muscle,20,#00008B\nLongitudinal_Muscle,21,#B8860B\nM_Fat,22,#006400\nBlood_Vessel,23,#8B0000\nFluid,24,#E9967A\nBowel,25,#8FBC8F\nBlood,26,#483D8B\nAnal_Rectal_Junction,27,#2F4F4F\nAnal_Cavity,28,#FFD700\nReflection,29,#ADFF2F\nThis file will be referenced during the MONAILabel configuration to use your custom labels.\n\n\nStep 4: Modifying apps/endoscopy/lib/infers/tooltracking.py to Include Custom Labels\nTo make sure your custom labels are used by the tooltracking model, you need to update the labels and their corresponding colors in the tooltracking.py file. Here’s how you can override the labels:\n# Override Labels\nself.labels = {\n    \"Tumor_Cancer\": 1,\n    \"Tumor_Sessile_Adenoma\": 2,\n    \"Tumor_Polypoidal_Adenoma\": 3,\n    \"Tumor_Pedunculated_Adenoma\": 4,\n    \"Sucker\": 5,\n    \"Diathermy\": 6,\n    \"Retractor\": 7,\n    \"Needle_Holder\": 8,\n    \"Needle\": 9,\n    \"Suture\": 10,\n    \"Clip\": 11,\n    \"Scissors\": 12,\n    \"Rectoscope\": 13,\n    \"Rectal_Wall\": 14,\n    \"Rectal_Wall_Defect\": 15,\n    \"Rectal_Fold\": 16,\n    \"Rectal_Lumen\": 17,\n    \"Mucosa\": 18,\n    \"Submucosa\": 19,\n    \"Circular_Muscle\": 20,\n    \"Longitudinal_Muscle\": 21,\n    \"M_Fat\": 22,\n    \"Blood_Vessel\": 23,\n    \"Fluid\": 24,\n    \"Bowel\": 25,\n    \"Blood\": 26,\n    \"Anal_Rectal_Junction\": 27,\n    \"Anal_Cavity\": 28,\n    \"Reflection\": 29\n}\n\nself.label_colors = {\n    \"Tumor_Cancer\": (255, 0, 0),\n    \"Tumor_Sessile_Adenoma\": (0, 255, 0),\n    \"Tumor_Polypoidal_Adenoma\": (0, 0, 255),\n    \"Tumor_Pedunculated_Adenoma\": (255, 255, 0),\n    \"Sucker\": (255, 0, 255),\n    \"Diathermy\": (0, 255, 255),\n    \"Retractor\": (128, 0, 0),\n    \"Needle_Holder\": (0, 128, 0),\n    \"Needle\": (0, 0, 128),\n    \"Suture\": (128, 128, 0),\n    \"Clip\": (128, 0, 128),\n    \"Scissors\": (0, 128, 128),\n    \"Rectoscope\": (255, 165, 0),\n    \"Rectal_Wall\": (165, 42, 42),\n    \"Rectal_Wall_Defect\": (95, 158, 160),\n    \"Rectal_Fold\": (210, 105, 30),\n    \"Rectal_Lumen\": (255, 127, 80),\n    \"Mucosa\": (100, 149, 237),\n    \"Submucosa\": (220, 20, 60),\n    \"Circular_Muscle\": (0, 0, 139),\n    \"Longitudinal_Muscle\": (184, 134, 11),\n    \"M_Fat\": (0, 100, 0),\n    \"Blood_Vessel\": (139, 0, 0),\n    \"Fluid\": (233, 150, 122),\n    \"Bowel\": (143, 188, 143),\n    \"Blood\": (72, 61, 139),\n    \"Anal_Rectal_Junction\": (47, 79, 79),\n    \"Anal_Cavity\": (255, 215, 0),\n    \"Reflection\": (173, 255, 47)\n}\n\n\nStep 5: Creating a Helper Script to Run MONAILabel with Custom Labels\nYou can create a simple shell script to run MONAILabel with your custom labels and CVAT integration in one command. Save the following script as run_monailabel.sh:\n#!/bin/bash\n\n# Copy config file with custom labels\ncp apps/endoscopy/cvat_plugin/tooltracking.yaml /usr/local/monailabel/plugins/cvat/endoscopy/tooltracking.yaml\n \n# Set environment variables\nexport MONAI_LABEL_DATASTORE=cvat\nexport MONAI_LABEL_DATASTORE_URL=http://127.0.0.1:8080\nexport MONAI_LABEL_DATASTORE_USERNAME=&lt;username&gt;\nexport MONAI_LABEL_DATASTORE_PASSWORD=&lt;password&gt;\n\n# Start MONAILabel server with the specified configurations\nmonailabel start_server \\\n  --app apps/endoscopy \\\n  --studies datasets/images \\\n  --conf models tooltracking \\\n  --conf epistemic_enabled true \\\n  --conf epistemic_top_k 100 \\\n  --conf cvat_segment_size 100 \\\n  --conf cvat_labels_file apps/endoscopy/surgvu_labels.csv\nMake sure to give execute permission to the script:\nchmod +x run_monailabel.sh\nNow you can run MONAILabel with all configurations using this single command:\n./run_monailabel.sh",
    "crumbs": [
      "Copying Datasets, Adding Labels, and Configuring MONAILabel with CVAT"
    ]
  },
  {
    "objectID": "setup_persistent_directories_for_monailabel.html",
    "href": "setup_persistent_directories_for_monailabel.html",
    "title": "Ensuring Docker Persistence with MONAILabel for Medical AI",
    "section": "",
    "text": "Step 1: Creating the Folders for Persistent Storage\nWe will create two folders, datasets and apps, in a directory of your choice on your local machine. These folders will later be mapped to the MONAILabel Docker container.\n\nCreate the datasets folder: This folder will store all the medical images and annotations, including any pre-existing labels.\nIn your terminal, run:\n!mkdir -p ~/monailabel_workspace/datasets\nCreate the apps folder: This folder will store the MONAILabel apps, including the Endoscopy tool tracking app. You can also customize these apps for your specific use case.\nIn your terminal, run:\n!mkdir -p ~/monailabel_workspace/apps\n\n\n\nStep 2: Verifying the Folder Creation\nYou can verify that the directories were created successfully by listing the contents of the monailabel_workspace folder.\nRun:\n!ls -la ~/monailabel_workspace\nYou should see the following output with both the datasets and apps folders listed:\ndrwxr-xr-x 2 user user 4096 Oct 25 14:30 datasets\ndrwxr-xr-x 2 user user 4096 Oct 25 14:30 apps\n\n\nStep 3: Understanding Docker Volume Mapping\nDocker allows us to map directories on the host machine (your local system) to directories inside the Docker container. This is crucial for ensuring persistence. When we run the MONAILabel container in the next tutorial, we will map the datasets and apps folders we just created to the corresponding locations inside the Docker container.\nHere’s how the volume mapping works:\n\ndatasets: The local ~/monailabel_workspace/datasets folder will be mapped to /workspace/datasets inside the container.\napps: The local ~/monailabel_workspace/apps folder will be mapped to /workspace/apps inside the container.\n\nThis ensures that any data or apps you add to these directories will persist even after the Docker container is stopped.\n\n\nStep 4: Preparing for MONAILabel Setup\nNow that the folders for persistence are ready, in the next notebook, we will install MONAILabel in a Docker container and map these folders. This will allow you to: - Store and access your medical images and annotations in the dataset folder. - Use the apps folder to store and modify MONAILabel apps, including the Endoscopy tool tracking app.\nIn the next notebook, we will: - Install the MONAILabel Docker container. - Map the datasets and apps folders to ensure data persistence. - Set up the Endoscopy tool tracking app inside the apps folder for customization.",
    "crumbs": [
      "Ensuring Docker Persistence with MONAILabel for Medical AI"
    ]
  },
  {
    "objectID": "setup_docker.html",
    "href": "setup_docker.html",
    "title": "Installing Docker for Machine Learning in Medicine",
    "section": "",
    "text": "Step 1: Install Docker\nNote: Docker Compose is now bundled with Docker, so a separate installation of docker-compose is no longer necessary. We will walk through platform-specific installation instructions for Docker.\n\n\nDocker Installation on Linux\n\nUpdate Your Packages:\nBefore installing Docker, update your package repository:\nsudo apt update\nsudo apt upgrade\nInstall Required Packages:\nInstall dependencies for Docker installation:\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\nAdd Docker’s Official GPG Key and Repository:\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\nsudo add-apt-repository \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nInstall Docker:\nAfter adding Docker’s official repository, install Docker:\nsudo apt update\nsudo apt install docker-ce docker-ce-cli containerd.io\nVerify Installation:\nCheck if Docker is installed correctly by running:\ndocker --version\nAdd Your User to the Docker Group (Optional):\nTo run Docker commands without sudo:\nsudo usermod -aG docker $USER\nLog out and back in again for this to take effect.\nTest the Installation:\nRun a test container to ensure Docker is working correctly:\ndocker run hello-world\n\n\n\nDocker Installation on Windows\n\nInstall Docker Desktop:\nDocker Desktop is required for Windows. You can download it from Docker’s official page.\nEnable WSL2 (Windows Subsystem for Linux):\nDocker Desktop for Windows requires WSL2. To install and configure WSL2:\n\nOpen PowerShell as an Administrator and run:\nwsl --install\nReboot your system if prompted.\n\nInstall Docker Desktop:\n\nRun the Docker Desktop installer and follow the installation prompts.\nAfter installation, start Docker Desktop from the Start Menu.\n\nVerify Installation:\nOpen a terminal (PowerShell or CMD) and run:\ndocker --version\nTest the Installation:\nTo test Docker, run the following in your terminal:\ndocker run hello-world\n\n\n\nDocker Installation on macOS\n\nDownload Docker Desktop for Mac:\nYou can download the Docker Desktop installer for macOS from Docker’s official page.\nInstall Docker Desktop:\n\nDouble-click the downloaded .dmg file and drag the Docker icon to your Applications folder.\nOpen Docker from your Applications.\n\nVerify Installation:\nOnce Docker is installed, open a terminal and check the version:\ndocker --version\nTest the Installation:\nRun the following command to check if Docker is working correctly:\ndocker run hello-world\n\n\n\nCommon Issues and Troubleshooting\nHere are some common issues users might face during Docker installation:\n\nPermission Denied (Linux):\nIf you get a permission error when running Docker commands without sudo, ensure that your user is added to the docker group as explained above:\nsudo usermod -aG docker $USER\nWSL2 Errors (Windows):\nIf Docker Desktop fails to run on Windows, ensure that WSL2 is properly installed. You can manually update your WSL kernel with:\nwsl --update\nmacOS Network Issues:\nIf Docker cannot access the internet, ensure that it is not blocked by your firewall or network settings. Restarting Docker Desktop can also resolve these issues.\n\n\n\nNext Steps\nCongratulations! Docker is now installed and running on your system. In the next notebook, we will cover how to set up MONAILabel and CVAT using Docker. Ensure Docker is running in the background as it will be required in subsequent tutorials.",
    "crumbs": [
      "Installing Docker for Machine Learning in Medicine"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tutorials",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "tutorials"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "tutorials",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall tutorials in Development mode\n# make sure tutorials package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to tutorials\n$ nbdev_prepare",
    "crumbs": [
      "tutorials"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "tutorials",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/bilalcodehub/tutorials.git\nor from conda\n$ conda install -c bilalcodehub tutorials\nor from pypi\n$ pip install tutorials\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "tutorials"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "tutorials",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "tutorials"
    ]
  },
  {
    "objectID": "uploading_finetuned_models_to_nuclio.html",
    "href": "uploading_finetuned_models_to_nuclio.html",
    "title": "10: Uploading Fine-Tuned Models to Nuclio",
    "section": "",
    "text": "Step 1: Delete the Existing Endoscopy Folder in CVAT\nBefore uploading the new fine-tuned models, we need to remove the existing endoscopy folder in the CVAT directory to ensure that the old models are not used.\nRun the following command to delete the folder:\nrm -rf cvat/endoscopy/\nThis ensures that any previous versions of the endoscopy models are cleared before we upload the updated models.\n\n\nStep 2: Copy Fine-Tuned Models to the Host\nOnce the fine-tuning process is complete, we need to copy the fine-tuned models from the MONAILabel Docker container to the host machine so that they can be uploaded to CVAT.\nRun the following command to copy the app (along with the fine-tuned models) from the MONAILabel container to the CVAT folder on the host:\ndocker cp $(docker container ls | grep 'sweet_agnesi' | awk '{print $1}'):opt/monai/apps/endoscopy cvat\n\ndocker cp: Copies files from a Docker container to the host machine.\n$(docker container ls | grep ‘sweet_agnesi’): Identifies the MONAILabel container.\nopt/monai/apps/endoscopy: The path to the endoscopy app with the fine-tuned models inside the container.\ncvat: The destination folder on the host machine where the models will be copied.\n\nAfter running this command, the fine-tuned models will be available in the cvat/endoscopy folder on the host machine.\n\n\nStep 3: Update CVAT with the Fine-Tuned Models\nNow that we have the fine-tuned models on the host machine, we need to update CVAT so that it can use these models during future tasks. To do this, we will use a script that updates the models in Nuclio and CVAT.\nRun the following command to update the model files in CVAT:\n./cvat/endoscopy/update_cvat_model.sh tooltracking\nThis command: - ./cvat/endoscopy/update_cvat_model.sh: The script to update the CVAT model. - tooltracking: The specific model being updated (in this case, surgical tool tracking).\nThis script will upload the fine-tuned model to Nuclio and update CVAT to use the new model for further tasks and annotations.\n\n\nWhat Happens Next\nAfter running the above commands, CVAT will now use the updated fine-tuned models for any future annotation tasks. These models will be deployed via Nuclio, allowing for automated and improved annotation performance.\nThe active learning cycle can continue with the newly trained models, and MONAILabel will now be able to generate even more accurate predictions.\nThis concludes the process of uploading fine-tuned models to Nuclio. You are now ready to use these models for your surgical tool tracking tasks in CVAT!",
    "crumbs": [
      "10: Uploading Fine-Tuned Models to Nuclio"
    ]
  },
  {
    "objectID": "accessing_cvat_tasks_and_uploading_preannotations_v2.html",
    "href": "accessing_cvat_tasks_and_uploading_preannotations_v2.html",
    "title": "09: Accessing Projects, Tasks in CVAT and Uploading Preannotations",
    "section": "",
    "text": "Step 1: Generate COCO Annotations from PNG Masks\nWe assume that your preannotated masks are stored in the dataset folder in PNG format. Here’s how to convert them into COCO format so that they can be uploaded to CVAT:\nimport json\nimport numpy as np\nfrom PIL import Image\nimport os\nfrom pycocotools import mask as mask_utils\n\ndef masks_to_coco(mask_folder, mask_filenames, task_name, suffix, categories):\n    output_coco_file = f\"{task_name}{suffix}.json\"\n    coco_format = {\n        \"images\": [],\n        \"annotations\": [],\n        \"categories\": categories,\n        \"info\": {\"description\": f\"Dataset for {task_name} with segmentation masks\"},\n        \"licenses\": [],\n    }\n\n    annotation_id = 1\n    image_id_counter = 1\n\n    for mask_file in mask_filenames:\n        mask_path = os.path.join(mask_folder, mask_file)\n        mask = np.array(Image.open(mask_path))\n        height, width = mask.shape[:2]\n\n        coco_format[\"images\"].append({\n            \"id\": image_id_counter,\n            \"file_name\": mask_file,\n            \"width\": width,\n            \"height\": height,\n        })\n\n        for category_id in np.unique(mask):\n            if category_id == 0:\n                continue\n\n            binary_mask = (mask == category_id).astype(np.uint8)\n            rle = mask_utils.encode(np.asfortranarray(binary_mask))\n            rle['counts'] = rle['counts'].decode('utf-8')\n\n            coco_format[\"annotations\"].append({\n                \"id\": annotation_id,\n                \"image_id\": image_id_counter,\n                \"category_id\": int(category_id),\n                \"segmentation\": rle,\n                \"area\": float(np.sum(binary_mask)),\n                \"bbox\": mask_utils.toBbox(rle).tolist(),\n                \"iscrowd\": 0,\n            })\n\n            annotation_id += 1\n\n        image_id_counter += 1\n\n    with open(output_coco_file, 'w') as f:\n        json.dump(coco_format, f, indent=4)\n\n    return output_coco_file\nThis code will read the masks from the mask_folder and turn them into COCO format. Make sure you adjust the mask_folder and category list appropriately for your setup.\n\n\nStep 2: Upload Preannotations to CVAT\nAfter generating the COCO annotations, we will upload them to the task in CVAT.\n\nOpen the CVAT web app: Navigate to http://127.0.0.1:8080 in your browser.\nLogin to CVAT: Use your username (django) and password (A1b2c345).\nSelect the Project: Click on the SurgVU project, which is where the tasks are defined.\nOpen the Task: Select the task named Iteration_1.\nUpload the COCO file: Navigate to the task, and upload the COCO file that was generated in Step 1.\n\nTo upload the annotations in CVAT, follow these steps: 1. Click on the task in the CVAT UI. 2. Use the “Upload Annotations” option and select the generated COCO file.\nCVAT will now process the uploaded annotations, and the preannotated masks will appear in the task.\n\n\nStep 3: Review and Complete the Task in CVAT\nOnce the annotations have been uploaded, open the task in CVAT to review how the masks are rendered.\n\nReview the Annotations: Ensure that the preannotated masks are correctly applied to each image.\nEdit and Complete the Task: Make changes to any incorrect annotations or complete the labeling for images that were missed.\nSave and Submit: Once you’re satisfied with the annotations, save the changes, complete the task, and submit it.\n\nThis will kickstart the fine-tuning process in MONAILabel. The server will detect that the task has been completed and automatically begin fine-tuning the model with the newly labeled data.\n\n\nWhat Happens Next\nAfter the task is completed in CVAT and submitted: 1. MONAILabel will automatically detect the completion status of the task. 2. The server will trigger model fine-tuning with the newly generated labels. 3. You can monitor the fine-tuning process in MONAILabel and continue iterating through the active learning workflow.\nIn the next notebook, we’ll explore how to manage the fine-tuning process and evaluate the newly trained models.",
    "crumbs": [
      "09: Accessing Projects, Tasks in CVAT and Uploading Preannotations"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "running_monailabel_server_for_active_learning_with_cvat.html",
    "href": "running_monailabel_server_for_active_learning_with_cvat.html",
    "title": "09: Running MONAILabel Server for Active Learning with CVAT",
    "section": "",
    "text": "Step 1: Launch the MONAILabel Server for Active Learning\nWe will use Docker to run the MONAILabel server with GPU support and set up active learning. This command mounts your dataset and app folders for MONAILabel to access, and uses port 8080 for CVAT to connect to the MONAILabel server.\nRun the following Docker command:\ndocker run -it --rm --gpus all --ipc=host --net=host -p 8080:8080 -v /home/exsdatalab/data/endo:/opt/monai/datasets -v /home/exsdatalab/data/apps:/opt/monai/apps projectmonai/monailabel:latest bash\nOnce inside the container, initialize the environment and start the MONAILabel server for active learning.\n\n\nRunning the Initialization Script\nUse the helper script run_monailabelinits.sh to start the MONAILabel server with all the necessary configurations for active learning:\n./datasets/run_monailabelinits.sh\nThis script does the following:\n\nEnvironment Variables:\nexport MONAI_LABEL_DATASTORE=cvat\nexport MONAI_LABEL_DATASTORE_URL=http://127.0.0.1:8080\nexport MONAI_LABEL_DATASTORE_USERNAME=&lt;USERNAME&gt;\nexport MONAI_LABEL_DATASTORE_PASSWORD=&lt;PASSWORD&gt;\nStart the MONAILabel Server:\nmonailabel start_server \\\n  --app apps/endoscopy \\\n  --studies datasets/images \\\n  --conf models tooltracking \\\n  --conf epistemic_enabled true \\\n  --conf epistemic_top_k 10\n\nThis command will start the MONAILabel server and enable active learning. It will score unlabeled images using epistemic uncertainty and automatically upload the top 10 most uncertain images to CVAT for annotation.\n\n\nExplanation:\n\nMONAI_LABEL_DATASTORE: Defines that we are using CVAT as the datastore.\nMONAI_LABEL_DATASTORE_URL: Specifies the CVAT server URL (running on http://127.0.0.1:8080).\nMONAI_LABEL_DATASTORE_USERNAME and PASSWORD: Your CVAT login credentials.\n–app: Specifies the location of the endoscopic app (e.g., tool tracking).\n–studies: Specifies the dataset that MONAILabel will use.\n–conf models tooltracking: Loads the pre-trained model for surgical tool segmentation.\n–conf epistemic_enabled true: Enables epistemic uncertainty scoring for active learning.\n–conf epistemic_top_k 10: Specifies that the top 10 most uncertain images will be selected and uploaded to CVAT for annotation.\n\n\n\nWhat Happens After the Server Starts\n\nMONAILabel will begin scoring each unlabeled image using epistemic uncertainty.\nThe server will automatically select the top 10 most uncertain images and upload them to CVAT for annotation.\nThe active learning loop starts: once these images are annotated, MONAILabel will fine-tune the model and continue selecting new uncertain images in subsequent iterations.\nYou can view the automatically created projects and tasks in CVAT at http://127.0.0.1:8080.\n\n\n\nNext Steps\nIn the next notebook, we will cover: 1. Accessing projects and tasks in CVAT. 2. Uploading preannotations. 3. Submitting them to MONAILabel to kick-start the active learning workflow.",
    "crumbs": [
      "09: Running MONAILabel Server for Active Learning with CVAT"
    ]
  },
  {
    "objectID": "nuclio_integration_with_cvat.html",
    "href": "nuclio_integration_with_cvat.html",
    "title": "Integrating Nuclio with CVAT for Serverless Function Management",
    "section": "",
    "text": "Step 1: Installing Nuclio CLI (nuctl)\nThe first step in integrating Nuclio with CVAT is installing the Nuclio CLI, called nuctl. This tool allows us to deploy and manage serverless functions directly from the command line.\n\nDownload the Nuclio CLI: Use the following command to download the latest version of Nuclio CLI (nuctl):\nwget https://github.com/nuclio/nuclio/releases/download/1.13.12/nuctl-1.13.12-linux-amd64\nMake the Nuclio CLI Executable: After downloading the binary, make it executable by running:\nchmod +x nuctl-1.13.12-linux-amd64\nMove the Nuclio CLI to /usr/local/bin: To make nuctl globally accessible, create a symbolic link in /usr/local/bin:\nsudo ln -sf $(pwd)/nuctl-1.13.12-linux-amd64 /usr/local/bin/nuctl\nVerify Installation: Verify that nuctl was installed correctly by running:\nnuctl version\n\nMake sure you’re in the CVAT folder where the Nuclio CLI will be set up. You should run the following commands inside the CVAT directory:\ncd cvat\n\n\nStep 3: Deploying Serverless Functions\nWith Nuclio installed and the dashboard running, we can deploy serverless functions directly from the dashboard or using the nuctl CLI. These functions can be integrated with CVAT to automate annotation processes using machine learning models.\n\n\nStep 4: Integrating Nuclio with CVAT\nIn the next tutorial, we will demonstrate how to deploy a serverless function to Nuclio and integrate it with CVAT for automatic video and image annotation.",
    "crumbs": [
      "Integrating Nuclio with CVAT for Serverless Function Management"
    ]
  },
  {
    "objectID": "install_monailabel_with_docker.html",
    "href": "install_monailabel_with_docker.html",
    "title": "Installing MONAILabel with Docker for Endoscopic Video Analysis",
    "section": "",
    "text": "Step 1: Pulling the MONAILabel Docker Image\nRather than installing MONAILabel via pip, we will pull the latest Docker image of MONAILabel, which includes all dependencies and tools pre-installed.\n\nPull the MONAILabel Docker Image: Open your terminal and run the following command to pull the MONAILabel Docker image:\n!docker pull projectmonai/monailabel:latest\nThis will download the latest MONAILabel image from Docker Hub. The image includes all the necessary libraries and tools required to run MONAILabel.\nVerify the Image: After pulling the image, verify that it has been downloaded successfully:\n!docker images\nYou should see projectmonai/monailabel listed among your available images.\n\n\n\nStep 2: Running the MONAILabel Container with CVAT and GPU Support\nNow that the Docker image has been downloaded, we need to run it with the appropriate volume mappings to ensure persistence of data, GPU support, and communication with CVAT.\n\nRun MONAILabel with GPU and Mapped Volumes: Use the following command to run MONAILabel, mapping both the datasets and apps directories, as well as enabling GPU support and communication with CVAT:\ndocker run -it --rm --gpus all --ipc=host --net=host \\\n    -p 8080:8080 \\\n    -p 8000:8000 \\\n    -v /home/exsdatalab/data/endo:/opt/monai/datasets \\\n    -v /home/exsdatalab/data/apps:/opt/monai/apps \\\n    projectmonai/monailabel:latest bash\nHere’s a breakdown of the command:\n\n-it: Runs the container in interactive mode with a terminal.\n--rm: Automatically removes the container after it stops.\n--gpus all: Allocates all available GPUs to the container for AI and machine learning tasks.\n--ipc=host: Shares the host’s IPC (inter-process communication) namespace with the container.\n--net=host: Shares the host’s network configuration with the container.\n-p 8080:8080: Maps port 8080 on the host to port 8080 in the container for CVAT.\n-p 8000:8000: Maps port 8000 on the host to port 8000 in the container for MONAILabel.\n-v /home/exsdatalab/data/endo:/opt/monai/datasets: Maps the local datasets folder to the container for persistent data storage.\n-v /home/exsdatalab/data/apps:/opt/monai/apps: Maps the local apps folder to store and modify MONAILabel applications.\n\nAccess the MONAILabel Server: Once the container is running, you can access the MONAILabel server by opening a browser and navigating to:\nhttp://localhost:8000\nThis will bring up the MONAILabel interface, and CVAT can communicate with MONAILabel via port 8080 for machine learning-assisted annotations.\n\n\n\nStep 3: Downloading the Endoscopy App\nMONAILabel supports a variety of apps tailored to different medical tasks. The Endoscopy Tool Tracking app is one of the key applications used for tracking surgical instruments in endoscopic videos. We will download and prepare this app for use with MONAILabel.\n\nDownload the Endoscopy App: In your terminal, run the following command to download the Endoscopy app into the apps directory:\n!docker exec -it &lt;container_id&gt; monailabel apps --download --name endoscopy --output /workspace/apps\nReplace &lt;container_id&gt; with the actual ID of your running MONAILabel container (which you can get by running docker ps). This command downloads the Endoscopy app into the /workspace/apps folder inside the container, which is mapped to your local apps folder for persistence.\nVerify the App Download: After downloading, verify that the Endoscopy app is available in the apps folder:\n!ls ~/monailabel_workspace/apps\nYou should see the endoscopy folder listed.\n\n\n\nStep 4: Next Steps\nNow that MONAILabel is up and running with the Endoscopy app downloaded, you are ready to start exploring AI-assisted annotation for endoscopic tool tracking.\nIn the next notebook, we will guide you through setting up CVAT and linking it to the MONAILabel server for seamless video annotation.",
    "crumbs": [
      "Installing MONAILabel with Docker for Endoscopic Video Analysis"
    ]
  },
  {
    "objectID": "install_cvat_with_docker.html",
    "href": "install_cvat_with_docker.html",
    "title": "Setting Up CVAT and Nuclio for Medical Image and Video Annotation",
    "section": "",
    "text": "Step 1: Clone CVAT Repository and Checkout to Version v2.7.5\nTo get started with CVAT, we need to clone the official repository and checkout a stable version (v2.7.5). This version includes the features we need for seamless integration with MONAILabel.\n\nClone the CVAT Repository: Open a terminal and run the following commands to clone the CVAT repository:\n!git clone https://github.com/opencv/cvat\ncd cvat\nCheckout the Stable Version: After cloning the repository, checkout the stable version v2.7.5:\n!git checkout v2.7.5\nThis ensures that you are working with a stable release of CVAT, compatible with the latest MONAILabel version.\n\n\n\nStep 2: Set Host and CVAT Version, Configure CVAT\nBefore starting CVAT, we need to configure the host IP and set the CVAT version in the environment variables. This step is essential to ensure that your CVAT instance can be accessed locally or from other devices.\n\nSet Host IP and CVAT Version: Execute the following commands to set the host and CVAT version. You can use 127.0.0.1 if you’re working locally.\nexport CVAT_HOST=127.0.0.1\nexport CVAT_VERSION=v2.7.5\n\n\n\nStep 3: Start CVAT Using Docker Compose\nNow, we will use Docker Compose to launch the CVAT service along with Nuclio. CVAT is composed of multiple services, such as a server, UI, and machine learning model integration.\n\nStart CVAT with Docker Compose: Use the following command to start CVAT. This will also enable serverless functionality via Nuclio:\n!docker compose -f docker-compose.yml -f components/serverless/docker-compose.serverless.yml up -d\nThis command pulls the necessary Docker images and starts all CVAT services. Make sure that ports 8070, 8080, and 8090 are available or modify the docker-compose.yml file if you need to use alternative ports.\nCreate Superuser (Admin Account): After CVAT is up and running, we need to create a superuser account to manage the system. Run the following command:\n!docker exec -it cvat_server bash -ic 'python3 ~/manage.py createsuperuser'\nThis will prompt you to enter a username, email, and password for the superuser.\n\n\n\nStep 4: Access CVAT\nOnce CVAT is up and running, you can access it through a web browser.\n\nOpen CVAT in Your Browser: Navigate to http://127.0.0.1:8080 (or replace 127.0.0.1 with your host IP if different) in Chrome or another browser. You should see the CVAT login screen.\nLogin: Log in using the superuser credentials that you created earlier.\n\n\n\nStep 5: Troubleshooting and Configuration\nIf you encounter any issues during the installation process, here are a few common troubleshooting steps:\n\nPort Conflicts: If any of the required ports (8070, 8080, or 8090) are already in use, modify the docker-compose.yml file to change the port mappings, or stop any services that may be using these ports.\nPermissions Issues: If Docker commands require root permissions, ensure that your user is part of the docker group:\nsudo usermod -aG docker $USER\nCVAT Service Not Starting: Check the logs for any errors by running:\ndocker logs &lt;container_name&gt;\n\n\n\nNext Steps\nNow that CVAT is installed and running on your machine, you can start annotating medical videos and images. In the next tutorial, we will integrate CVAT with MONAILabel, allowing machine learning models to assist in the annotation process.",
    "crumbs": [
      "Setting Up CVAT and Nuclio for Medical Image and Video Annotation"
    ]
  }
]